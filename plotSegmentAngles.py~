""" READ_ME
Written by Hunter Meyer

How to use this script: python3 plotSegmentAngles.py
Parameters you can change:
	markerSize (Float)
	drawAllEvents (Bool)
	eventToDraw (Int)
	colors (List of Color Strings)
	recoFileName (String)
	screenshot1path (String)
	screenshot2path (String)
	outputFileName (String)

recoFileName must have to following contents:
recoEventNum, recoSegmentNum, recoPointNum, recoX, recoY, and recoZ
	Each entry is a trajectory point that describes has an X,Y,Z position, as well as some identifying
	information to separate the trajectory points based on event and segment.  recoPointNum is not used.
	
This script will convert the 1D arrays gotten from np.loadtxt(recoFileName, unpack = True, skiprows = 1) to this data structure:
recoData = [[[[x1,x2,x3...],[y1,y2,y3,...],[z1,z2,z3,...]],[segment2],[segment3],...],[event2],[event3],...]
	This is a 4D list, with entries of events, that contain entries of segments, that each have X,Y,Z lists that contain the
	X,Y, and Z data for all trajectory points corresponding to that segment in that event.
	
	If you would instead like the list of trajectory points in a segment in an event, you must transpose recoData[eventNum][segmentNum].
	
Must finish documentation, must update parameters as well, assuming they change.
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

############################################################
# Section 1 - Setup: Read Data
############################################################

# Parameters you can change, see above READ_ME
markerSize = 0.3
drawAllEvents = False
eventsToDraw = [209] # 209 is in the main figure.
colors = ['blue','red','green','yellow','orange','purple','magenta','lime','deeppink']
recoFileName = "normalRecoPosInfoLastSegmentIncluded.txt"
screenshot1path = "beeEventDisplayScreenshots/screenshot11.png"
screenshot2path = "beeEventDisplayScreenshots/screenshot12.png"
outputFileName = "segmentAngles.png"

# Draw reconstructed segments, labelled by color

recoEventNum,recoSegmentNum,recoPointNum,recoX,recoY,recoZ = np.loadtxt(recoFileName,unpack = True,skiprows=1)

# Convert to integers to be used as list index
recoEventNum = recoEventNum.astype(int)
recoSegmentNum = recoSegmentNum.astype(int)
recoPointNum = recoPointNum.astype(int)
 
# Get the maximums
recoMaxSeg = np.amax(recoSegmentNum)
maxEventNum = np.amax(recoEventNum)				# Currently not used
# Events begin counting at 1 and go to maxEventNum.
# Segments begin counting at 0 and go to recoMaxSeg for that event. (for the events that contained the maximum, for the other events we will later chop off the empty data)

# Setting some initial values.
oldSegNum = 0									# Previous entry's segment num (initially set to 0, arbitrarily)
currSegNum = recoSegmentNum[0] 					# Initial entry's initial segment num (should be 0)
oldEventNum = 0									# Previous entry's event num (initially set to 0, arbritrarily)
currEventNum = recoEventNum[0]					# Initial entry's event num (normally 1)

############################################################
# Section 2 - Setup: Organize Data
############################################################

recoData = [[[[],[],[]] for segment in np.arange(0,recoMaxSeg+1)] for event in np.arange(0,maxEventNum)] # +1 comes from the fact that segments go from 0 to recoMaxSeg, meaning there are recoMaxSeg+1 total segments!
# Build the recoData list using the following structure: (easily read from right to left)
# [[[[x1,x2,x3...],[y1,y2,y3,...],[z1,z2,z3,...]],[segment2],[segment3],...],[event2],[event3],...]
# Recall that events start at 1 but segments start at 0

for entry in np.arange(0,len(recoEventNum)):	# Loop through every entry
	oldEventNum = currEventNum
	oldSegNum = currSegNum
	
	currEventNum = recoEventNum[entry]
	currSegNum = recoSegmentNum[entry]
	
	recoData[currEventNum-1][currSegNum][0].append(recoX[entry])	# -1 comes from events starting to count at 1, not 0
	recoData[currEventNum-1][currSegNum][1].append(recoY[entry])
	recoData[currEventNum-1][currSegNum][2].append(recoZ[entry])

# Remove the entries of recoData that are empty. (when that event have a number of segments less than recoMaxSeg)
emptySegment = [[],[],[]]
for event in recoData:
	try:
		while True:
			event.remove(emptySegment)
	except ValueError:
		pass

############################################################
# Section 3 - Get Barycenters for Polygonal Segments
############################################################

# Get the barycenters of each segment
barycenters = [[] for event in np.arange(0,maxEventNum)] # No +1 for np.arange(0,recoMaxSeg) since we don't take the barycenter for the last track segment (which isn't a full 14 cm segment)
for eventNum in np.arange(0,len(recoData)):
	for segmentNum in np.arange(0,len(recoData[eventNum])-1):
		barycenters[eventNum].append([np.average(recoData[eventNum][segmentNum][0]),np.average(recoData[eventNum][segmentNum][1]),np.average(recoData[eventNum][segmentNum][2])])
# The barycenter data structure:
# [[[x,y,z],barycenter2,barycenter3,...],event2, event3,....]

############################################################
# Section 4 - Get Linear Fits for Linear Segments
############################################################

# What I am about to do:
# Using recoData, get the linear fits of each segment (we will get a list that has 4 entries corresponding to the fit parameters in the 2 projections)
# Using the linear fits and the barycenters, we will calculate 2 points for each segment that are equally distanced from the barycenter (centroid) correspond to the linear fits.
# We will end up with this data structure:
# [[[[x1,y1,z1],[x2,y2,z2]],linearSegment2,linearSegment3,...],event2, event3, ...]
#    \___VV___/ \___VV___/
#      Point 1    Point 2
# The distance between Points 1 and 2 will be controlled by a parameter, so that we can easily visualize the angles.

for eventNum in np.arange(0,len(recoData)):
	event = recoData[eventNum]
	for segmentNum in np.arange(0,len(event)):
		segment = event[segmentNum]
		
		

############################################################
# Section 5 - Plotting
############################################################

fig = plt.figure()
# Top Left - X vs. Z Polygonal Segments
ax1 = plt.subplot(221)
ax1.set_title("Polygonal Segments X vs. Z")
ax1.set_xlabel("Z (cm)")
ax1.set_ylabel("X (cm)")

# Bottom Left - Y vs. Z Polygonal Segments
ax2 = plt.subplot(223)
ax2.set_title("Polygonal Segments Y vs. Z")
ax2.set_xlabel("Z (cm)")
ax2.set_ylabel("Y (cm)")

# Top Right - X vs. Z Linear Segments
ax3 = plt.subplot(222)
ax3.set_title("Linear Segments X vs. Z")
ax3.set_xlabel("Z (cm)")
ax3.set_ylabel("X (cm)")

# Bottom Right - Y vs. Z Linear Segments
ax3 = plt.subplot(224)
ax3.set_title("Linear Segments Y vs. Z")
ax3.set_xlabel("Z (cm)")
ax3.set_ylabel("Y (cm)")

for eventNum in np.arange(0,len(recoData)):

	if (eventNum in eventsToDraw) or drawAllEvents:
		xBarycenters = np.transpose(barycenters[eventNum]).tolist()[0]
		yBarycenters = np.transpose(barycenters[eventNum]).tolist()[1]
		zBarycenters = np.transpose(barycenters[eventNum]).tolist()[2]
	
		for segmentNum in np.arange(0,len(recoData[eventNum])):
			segment = recoData[eventNum][segmentNum]
			x = segment[0]
			y = segment[1]
			z = segment[2]
			
			# Plot segments
			ax1.plot(z,x,'o',markerSize = 5*markerSize, color = colors[segmentNum % len(colors)])
			ax2.plot(z,y,'o',markerSize = 5*markerSize, color = colors[segmentNum % len(colors)])

			# Plot Barycenters
			if segmentNum != len(recoData[eventNum])-1:
				xBarycenter = xBarycenters[segmentNum]
				yBarycenter = yBarycenters[segmentNum]
				zBarycenter = zBarycenters[segmentNum]
				
				ax1.plot(zBarycenter,xBarycenter,'o',markerSize = 10*markerSize, color = 'k')
				ax2.plot(zBarycenter,yBarycenter,'o',markerSize = 10*markerSize, color = 'k')

		# Plot Polygonal Segments (connected barycenters)
		ax1.plot(zBarycenters,xBarycenters,markerSize = markerSize/2, color = 'gray')
		ax2.plot(zBarycenters,yBarycenters,markerSize = markerSize/2, color = 'gray')

plt.tight_layout()

# Using this dpi for a very clear picture with lots of zoom available.
fig.dpi = 1200
plt.savefig(outputFileName,bbox_inches = 'tight')

# This is the default dpi
fig.dpi = 100
plt.show()
